---
- name: "Download containerd"
  unarchive:
    src: "https://storage.googleapis.com/cri-containerd-release/cri-containerd-{{ containerd_release_version }}.linux-amd64.tar.gz"
    dest: "/"
    remote_src: yes
- name: install cri-tools
  apt:
    name: cri-tools
    state: present
    update_cache: true
# https://kubernetes.io/docs/setup/production-environment/container-runtimes/#containerd
- name: "Configure containerd"
  file:
    path: /etc/containerd
    state: directory
- name: "Point crictl to containerd"
  shell: "containerd config default > /etc/containerd/config.toml"
  args:
    creates: /etc/containerd/config.toml
- name: "Restart containerd "
  systemd: name=containerd daemon_reload=yes state=restarted enabled=yes

- name: "Check kubelet args in kubelet config"
  shell: grep "^Environment=\"KUBELET_EXTRA_ARGS=" /etc/systemd/system/kubelet.service.d/10-kubeadm.conf || true
  register: check_args

- name: "Add runtime args in kubelet conf"
  lineinfile:
    dest: "/etc/systemd/system/kubelet.service.d/10-kubeadm.conf"
    line: "Environment=\"KUBELET_EXTRA_ARGS= --runtime-cgroups=/system.slice/containerd.service --container-runtime=remote --runtime-request-timeout=15m --container-runtime-endpoint=unix:///run/containerd/containerd.sock\""
    insertafter: '\[Service\]'
  when: check_args.stdout == ""

- name: "Start Kubelet"
  systemd: name=kubelet daemon_reload=yes state=started enabled=yes

# TODO This needs to be removed once we have consistent concurrent pull results
- name: "Pre-pull pause container image"
  shell: |
    /usr/local/bin/ctr pull k8s.gcr.io/pause:3.1
    /usr/local/bin/crictl --runtime-endpoint unix:///run/containerd/containerd.sock \
    pull k8s.gcr.io/pause:3.1
